docker build -t jenkins-img -f /vagrant/Dockerfile .
docker run -d --name jenkins-cnt jenkins-img

create pipeline word-cloud-generator

curl -X PUT "http://localhost:8081/service/rest/beta/security/users/admin/change-password" -H "accept: application/json" -H "Content-Type: text/plain" -d "admin"

1)   Проект из форкнутого репозитория

2)   В корне репозитория Dockerfile (from golang:latest + java)
2.1  Билдим (получаем тот же форкнутый репозиторий и make)
2.2  Upload nexus

3    В подкаталоге репозитория Dockerfile (from alpine)
3.1  Download from nexus
3.2  tests


1) В форкнутом репозитории имеется Jenkinsfile 
2) Этот файл подтягивает Jenkins с помощью scm 
3) На уровне пайплана просим дженкинс создать еще один контейнер (докерфайл будет находиться в корне форкнутого репозитория) 

pipeline {
    agent { dockerfile true }
    stages {
        stage('Test') {
            steps {
                sh 'node --version'
                sh 'svn --version'
            }
        }
    }
}

Мы видим что { dockerfile true } позволит создать контейнер , но только из докерфайла, лежащего в корне проекта и не дает нам возможности повлиять аргументами на сборку образа и запуск контейнера.

agent {
    // Equivalent to "docker build -f Dockerfile.build --build-arg version=1.0.2 ./build/
    dockerfile {
        filename 'Dockerfile.build'
        dir 'build'
        label 'my-defined-label'
        additionalBuildArgs  '--build-arg version=1.0.2'
        args '-v /tmp:/tmp'
    }
}

А вот так можем влиять. В задании у нас докерфайл лежит в корне репозитория и filename и dir нам не нужны, label также не нужен, а вот  additionalBuildArgs (аргументы на этапе билда ) и args (аргументы на этапе docker run ) нам понадовятся. 

4)  Запустить конетйнер , в нем уже будет стянут наш форкнутый репозиторий.
5)  (from golang:latest + java) контейнер который будет собран , в котором будет делать make.

 Дальше будет сделан upload nexus после make. 
 
 Должны будем попросить в этом контейнере созадть внутри этого конетйнера еще один контейнер (from alpine), где должен будет находится стянутый из нексуса артефакт. Далее запустим внутри первого контейнеа , который golang запустим тесты , обращаясь к контейнеру alpine . Затем убиваем этот контейнер, затем убиваем образ alpine , потом закончинся наш pipeline и дженкинс автоматом убьет golang контейнер и его образ 
 


COMPOSE_PROJECT_NAME - задаем название проекта : имя контейнера , сети , образа.
Если вы не задали данную переменную, то значение будет установлено из названия директории проекта. В нашем случае vagrant
